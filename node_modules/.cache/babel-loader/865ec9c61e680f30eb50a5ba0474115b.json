{"ast":null,"code":"var _jsxFileName = \"/Users/makhortykhruslan/Desktop/StopWatch/stopwatch/src/components/StopWatch/StopWatch.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StopWatch = () => {\n  _s();\n\n  const [second, setSecond] = useState('00');\n  const [minute, setMinute] = useState('00');\n  const [hours, setHours] = useState('00');\n  const [isActive, setIsActive] = useState(false);\n  const [counter, setCounter] = useState(0);\n  const dat = new Date();\n  console.log(dat);\n  useEffect(() => {\n    let intervalId;\n\n    if (isActive) {\n      intervalId = setInterval(() => {\n        const secondCounter = counter % 60;\n        const minuteCounter = Math.floor(counter / 60 % 60);\n        const hoursCounter = Math.floor(Math.floor(counter / 60) / 60);\n        const computedSecond = String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\n        const computedMinute = String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\n        const computedHours = String(hoursCounter).length === 1 ? `0${hoursCounter}` : hoursCounter;\n        setSecond(computedSecond);\n        setMinute(computedMinute);\n        setHours(computedHours);\n        setCounter(counter => counter + 1);\n      }, 1);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [isActive, counter]);\n\n  const reset = () => {\n    setCounter(0);\n    setHours('00');\n    setSecond('00');\n    setMinute('00');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"hours\",\n        children: hours\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"minute\",\n        children: minute\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"second\",\n        children: second\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsActive(!isActive),\n        className: \"start\",\n        children: isActive ? \"Pause\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => reset(),\n        className: \"reset\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StopWatch, \"0drxsyUzs6aCP7dmn88Lb4ALadk=\");\n\n_c = StopWatch;\nexport default StopWatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"StopWatch\");","map":{"version":3,"sources":["/Users/makhortykhruslan/Desktop/StopWatch/stopwatch/src/components/StopWatch/StopWatch.jsx"],"names":["React","useState","useEffect","StopWatch","second","setSecond","minute","setMinute","hours","setHours","isActive","setIsActive","counter","setCounter","dat","Date","console","log","intervalId","setInterval","secondCounter","minuteCounter","Math","floor","hoursCounter","computedSecond","String","length","computedMinute","computedHours","clearInterval","reset"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst StopWatch = () => {\n    const [second, setSecond] = useState('00');\n    const [minute, setMinute] = useState('00');\n    const [hours, setHours] = useState('00');\n    const [isActive, setIsActive] = useState(false);\n    const [counter, setCounter] = useState(0);\n    const dat = new Date()\n    console.log(dat)\n\n    useEffect(() => {\n        let intervalId;\n        if (isActive) {\n            intervalId = setInterval(() => {\n                const secondCounter = counter % 60;\n                const minuteCounter = Math.floor((counter / 60) % 60);\n                const hoursCounter = Math.floor(Math.floor(counter / 60) / 60);\n                const computedSecond = String(secondCounter).length === 1 ? `0${secondCounter}`: secondCounter;\n                const computedMinute = String(minuteCounter).length === 1 ? `0${minuteCounter}`: minuteCounter;\n                const computedHours = String(hoursCounter).length === 1 ? `0${hoursCounter}`: hoursCounter;\n\n                setSecond(computedSecond);\n                setMinute(computedMinute);\n                setHours(computedHours);\n\n                setCounter(counter => counter + 1);\n            }, 1)\n        }\n\n        return () => clearInterval(intervalId);\n    }, [isActive, counter])\n    const reset = () =>{\n        setCounter(0)\n        setHours('00');\n        setSecond('00');\n        setMinute('00')\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"time\">\n                <span className=\"hours\">{hours}</span>\n                <span>:</span>\n                <span className=\"minute\">{minute}</span>\n                <span>:</span>\n                <span className=\"second\">{second}</span>\n            </div>\n            <div className=\"buttons\">\n                <button onClick={() => setIsActive(!isActive)} className=\"start\">\n                    {isActive ? \"Pause\": \"Start\"}\n                </button>\n                <button onClick={() => reset()} className=\"reset\">Reset</button>\n            </div>\n        </div>\n    )\n}\n\nexport default StopWatch;\n"]},"metadata":{},"sourceType":"module"}